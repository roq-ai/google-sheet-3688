generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model invite {
  id                           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status                       String   @db.VarChar(255)
  invited_by                   String?  @db.Uuid
  invited_to                   String?  @db.Uuid
  created_at                   DateTime @default(now()) @db.Timestamp(6)
  updated_at                   DateTime @default(now()) @db.Timestamp(6)
  user_invite_invited_byTouser user?    @relation("invite_invited_byTouser", fields: [invited_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_invite_invited_toTouser user?    @relation("invite_invited_toTouser", fields: [invited_to], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?     @db.VarChar(255)
  name        String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  user_id     String      @db.Uuid
  tenant_id   String      @db.VarChar(255)
  user        user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_role   user_role[]
}

model profile {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String   @db.Uuid
  phone_number String?  @db.VarChar(20)
  address      String?  @db.VarChar(255)
  city         String?  @db.VarChar(255)
  country      String?  @db.VarChar(255)
  postal_code  String?  @db.VarChar(10)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model role {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @db.VarChar(255)
  permissions String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  user_role   user_role[]
}

model user {
  id                             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                          String         @unique @db.VarChar(255)
  firstName                      String?        @db.VarChar(255)
  lastName                       String?        @db.VarChar(255)
  roq_user_id                    String         @db.VarChar(255)
  tenant_id                      String         @db.VarChar(255)
  created_at                     DateTime       @default(now()) @db.Timestamp(6)
  updated_at                     DateTime       @default(now()) @db.Timestamp(6)
  invite_invite_invited_byTouser invite[]       @relation("invite_invited_byTouser")
  invite_invite_invited_toTouser invite[]       @relation("invite_invited_toTouser")
  organization                   organization[]
  profile                        profile[]
  user_role                      user_role[]
}

model user_role {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  role_id         String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role            role         @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
